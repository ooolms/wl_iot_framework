[hint]
* задача
% на потом
v сделано
? уточнить
+ in work
/ замечание
! важно

[общее]
* библиотека для разработки устройств на Qt
* библиотека для разработки устройств не на Qt
* unit-тесты

[Протокол]
? передача информации о датчиках (и контролах?) не в виде xml или json ???
* vendor id, vendor name и firmware version для устройства
? переделать протокол общения с сервером на использование параметров вида ключ=значение вместо позиционных
* добавить сокращенную xml для описания датчиков и контролов
? добавить не-xml описание датчиков и контролов

[Arduino library]
* имя устройства с переводами
* ссылка на страницу описания устройства
? добавить не-xml описание датчиков и контролов

[Qt library]
* потокобезопасность
* добавить сохранение сенсоров и интерфейса управления в упрощенном формате
* сделать ARpcTcpSslDevice  наследником ARpcTcpDevice

[Iot proxy server]
* сделать встроенную замену iotkit-agent
* уведомление об изменении состояния устройства (не связано с подключением/отключением/идентификацией!)
* команда bind_sensor без параметров показывает текущую привязку
! запихать в docs README, INSTALL, LICENSE и т.д.
! если устройство выключается при выполнении команды, нет ответа с error!
? плагины для источников устройств
* обрабатывать команды от устройств устройствам
* многопользовательский режим подключения по управляющему порту 4083
	* авторизация по паре логин/пароль
	* создание пользователей - через локальный клиент
	* два режима прав доступа: все имеют доступ ко всем устройствам и режим ACL (права доступа к лок. устройствам задаются через конс. клиент)
* использовать название сессии для команд управления сессиями, если нет дубликатов
* команды настройки последовательных портов (data bits, baud rate, flow control, parity)
* обработка данных на javascript (QtScript)
	? доступ к файлам и системному API (к какой части именно?)
	? управление сессиями из скриптов
	? лог-файл для скрипта
* дополнительные внешние сервисы
* экспорт данных в СУБД (например, MongoDB)
% мобильный клиент (Android, iOS)
* сканирование IP-сетей по адресу и маске (пример: задаем 192.168.1.0/24 и сканируются все устройства с адресами от 192.168.1.1 до 192.168.1.254)
* команда серверу на запрос состояния устройства
* пакеты под разные ОС (репозитории?)

[Iot proxy client]
v документация и inline-справка (--help)
* подключение к удаленным серверам по tcp для wliotproxy-ui
* проверить, почему тормозит wliotproxy-ui
* команда идентификации сервера, убрать сообщение об идентификации при каждом вызове
* команда bind_storage без параметров показывает текущую привязку
* добавить команду help (без --)

